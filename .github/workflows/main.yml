# .github/workflows/create-iso.yml

name: Create ISO from Release ZIP

on:
  # 1. 新しいリリースが公開されたら実行
  release:
    types: [published]
  
  # 2. 手動で実行できるようにする (workflow_dispatch)
  workflow_dispatch:
    inputs:
      tag:
        description: 'ISO変換の対象となるリリースのタグ名 (例: v1.0)'
        required: true
      zip_name:
        description: '変換元のZIPファイル名'
        required: true
        default: 'sayooshi-files.zip'

# リリース時に使われるZIPファイル名を定義
env:
  RELEASE_ZIP_NAME: "sayooshi-files.zip"

jobs:
  build-iso:
    runs-on: ubuntu-latest
    permissions:
      contents: write # リリースアセットの読み書きに必要

    steps:
      # (1) リポジトリの情報を読み込む (ghコマンドの動作に必須)
      - name: Check out repository
        uses: actions/checkout@v4

      # (2) 実行方法に応じて、対象のタグ名とZIPファイル名を変数にセットする
      - name: Set target variables
        id: get_vars
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "TAG_NAME=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "ZIP_NAME=${{ env.RELEASE_ZIP_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "TAG_NAME=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "ZIP_NAME=${{ github.event.inputs.zip_name }}" >> $GITHUB_OUTPUT
          fi

      # (3) GitHub公式CLIを使ってリリースからZIPファイルをダウンロード
      - name: Download Release ZIP Asset via gh CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download "${{ steps.get_vars.outputs.TAG_NAME }}" --pattern "${{ steps.get_vars.outputs.ZIP_NAME }}"
          
      # (4) ISOイメージ作成ツールをインストール
      - name: Install genisoimage
        run: sudo apt-get update && sudo apt-get install -y genisoimage

      # (5) ダウンロードしたZIPを解凍
      - name: Unzip Asset
        run: |
          mkdir -p isocontents
          unzip "${{ steps.get_vars.outputs.ZIP_NAME }}" -d isocontents

      # (6) 文字化け対策をしてISOファイルを作成
      # <-- ★★★ このステップを改善しました ★★★
      - name: Prepare files and Create ISO
        run: |
          # isocontentsディレクトリに移動
          cd isocontents
          
          # 中にある（文字化け可能性のある）サブフォルダ名を取得
          SUBFOLDER_NAME=$(ls)
          
          # サブフォルダの中身を全て現在の場所(isocontents)に移動
          mv "$SUBFOLDER_NAME"/* .
          
          # 親ディレクトリに戻る
          cd ..
          
          # isocontentsディレクトリを元にISOを作成
          genisoimage -V SAYOOSHI -J -r -o sayooshi.iso isocontents/
      
      # (7) 作成したISOファイルを同じリリースにアップロード
      - name: Upload ISO to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.get_vars.outputs.TAG_NAME }}
          file: sayooshi.iso
          asset_name: sayooshi.iso
          overwrite: true
